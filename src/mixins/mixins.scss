@mixin calc($property, $expression) {
  #{$property}: calc(#{$expression});
}

@mixin clearfix {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}

@mixin disabled-button($backgroun-color, $color) {
  background-color: lighten($backgroun-color, 10%);
  color: lighten($color, 20%);
  cursor: not-allowed;
}

@mixin make-variant-button($background-color, $color, $background-hover-color, $hover-darker, $disabled-color) {
  background-color: $background-color;
  color: $color;

  &:hover {
    background-color: darken($background-hover-color, $hover-darker);
  }

  &[disabled] {
    @include disabled-button($disabled-color, $color);
  }
}

@mixin make-variant-link-button ($color, $darken, $lighten ) {
  color: $color;

  &:hover {
    color: darken($color, $darken);
  }

  &[disabled] {
    background-color: transparent;
    color: lighten($color, $lighten);
  }
}

@mixin make-outlined-button($color, $border-color, $background-hover-color, $hover-color) {
  background-color: transparent;
  color: $color;
  border: 1px solid $border-color;

  &:hover {
    background-color: $background-hover-color;
    color: $hover-color;
  }

  //&[disabled] {
  //  @include disabled-button(map-get($sv-colors, 'green-50'));
  //}
}


@mixin table($line-height, $padding) {
  // margin-bottom: $sv-line-height;
  max-width: 100%;
  width: 100%;

  > thead,
  > tbody,
  > tfoot {
    > tr {
      > th,
      > td {
        line-height: $line-height;
        padding: $padding;
      }
    }
  }

}

@mixin transition($transition) {
  transition: $transition;
}

@mixin simple-shadow() {
  box-shadow: 0 1px 2px rgba(0,0,0,.1);
}

@mixin simple-shadow2() {
  box-shadow: 0 1px 3px 0 map-get($sv-colors, 'steel-300'), 0 0 0 1px map-get($sv-colors, 'steel-300');
}

@mixin focus-shadow() {
  box-shadow: 0 0 8px rgba(0, 0, 0, .18), 0 8px 16px rgba(0, 0, 0, .36);
}

@mixin shadow-2dp() {
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, $sv-shadow-key-penumbra-opacity),
              0 3px 1px -2px rgba(0, 0, 0, $sv-shadow-key-umbra-opacity),
              0 1px 5px 0 rgba(0, 0, 0, $sv-shadow-ambient-shadow-opacity);
}

@mixin shadow-3dp() {
  box-shadow: 0 3px 4px 0 rgba(0, 0, 0, $sv-shadow-key-penumbra-opacity),
              0 3px 3px -2px rgba(0, 0, 0, $sv-shadow-key-umbra-opacity),
              0 1px 8px 0 rgba(0, 0, 0, $sv-shadow-ambient-shadow-opacity);
}

@mixin shadow-4dp() {
  box-shadow: 0 4px 5px 0 rgba(0, 0, 0, $sv-shadow-key-penumbra-opacity),
              0 1px 10px 0 rgba(0, 0, 0, $sv-shadow-ambient-shadow-opacity),
              0 2px 4px -1px rgba(0, 0, 0, $sv-shadow-key-umbra-opacity);
}

@mixin shadow-6dp() {
  box-shadow: 0 6px 10px 0 rgba(0, 0, 0, $sv-shadow-key-penumbra-opacity),
              0 1px 18px 0 rgba(0, 0, 0, $sv-shadow-ambient-shadow-opacity),
              0 3px 5px -1px rgba(0, 0, 0, $sv-shadow-key-umbra-opacity);
}

@mixin shadow-8dp() {
  box-shadow: 0 8px 10px 1px rgba(0, 0, 0, $sv-shadow-key-penumbra-opacity),
              0 3px 14px 2px rgba(0, 0, 0, $sv-shadow-ambient-shadow-opacity),
              0 5px 5px -3px rgba(0, 0, 0, $sv-shadow-key-umbra-opacity);
}

@mixin shadow-16dp() {
  box-shadow: 0 16px 24px 2px rgba(0, 0, 0, $sv-shadow-key-penumbra-opacity),
              0  6px 30px 5px rgba(0, 0, 0, $sv-shadow-ambient-shadow-opacity),
              0  8px 10px -5px rgba(0, 0, 0, $sv-shadow-key-umbra-opacity);
}

@mixin shadow-24dp() {
  box-shadow: 0  9px 46px  8px rgba(0, 0, 0, $sv-shadow-key-penumbra-opacity),
              0 11px 15px -7px rgba(0, 0, 0, $sv-shadow-ambient-shadow-opacity),
              0 24px 38px  3px rgba(0, 0, 0, $sv-shadow-key-umbra-opacity);
}

$prefixes: -webkit-, -moz-, -o-, "";


@mixin customBorderRadius($topLeft: 0, $topRight: 0, $bottomRight: 0, $bottomLeft: 0) {
  @each $prefix in $prefixes {
    @if $prefix == "-moz-" {
      @if $topLeft != 0 { -moz-border-radius-topleft: $topLeft; }
      @if $topRight != 0 { -moz-border-radius-topright: $topRight; }
      @if $bottomRight != 0 { -moz-border-radius-bottomright: $bottomRight; }
      @if $bottomLeft != 0 { -moz-border-radius-bottomleft: $bottomLeft; }
    } @else {
      @if $topLeft != 0 { #{$prefix}border-top-left-radius: $topLeft; }
      @if $topRight != 0 { #{$prefix}border-top-right-radius: $topRight; }
      @if $bottomRight != 0 { #{$prefix}border-bottom-right-radius: $bottomRight; }
      @if $bottomLeft != 0 { #{$prefix}border-bottom-left-radius: $bottomLeft; }
    }
  }
}

@mixin borderRadius($size...) {
  @if length($size) == 1 {
    @each $prefix in $prefixes {
      #{$prefix}border-radius: $size;
    }
  } @else {
    @include customBorderRadius($size...);
  }
}